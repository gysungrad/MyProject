/*
 * @file table.h
 * Header file for class table
 */

#ifndef TABLE_H
#define TABLE_H

///////////////////////////////////////////////////////////////////////////////

/** Class that controls a mixture fraction and heat loss based table.
 *  
 *  @author Ryan Hintze
 */

#include <vector>
#include <iostream>
#include "odtParam.h"
//#include "odtline.h"
#include "radiation.h"

using namespace std;
class odtline;

/** A class generated by #TableReader. This is used to store
 * multiple 2-D tables into a single 3-D table and then perform
 * some useful functions on the 3-D table such as estimating
 * values. The table is assumed to be indexed as
 * <tt>
 * [Heat Loss][Mixture Fraction][Species/Property Index]->Value
 * </tt>
 * and other conformations <em> will \b not work.</em>
 * @author Ryan Hintze
 *
 */

class table {
    ////////////////////// CONSTANTS ////////////////////////

    static const double lbError                 = 0.000001;        ///< Any value below this is considered to be zero where applicable
    static const double maxDeviation            = 2.7605e-10;   ///< The Maximum error for which the data is considered to be uniform. Uniform data increases performance.
    static const int    ETA_DMIXF               = 0;            ///< Index of DMIXF in eta
    static const int    ETA_LAMBDA              = 1;            ///< Index of LAMBDA in eta
    static const int    NETA                    = 2;            ///< Number of values transported by ETA

    ////////////////////// STRUCTURES ///////////////////////

public:
    //! Structure holding the indices of the properties contained in
    //! table
    struct prop_indices {

        int cp_index;                                 ///< The index to the column that contains heat capacity
        int Dmixf_index;                              ///< The index to the column that contains Dmixf
        int enth_index;                               ///< The index to the column that contains enthalpy
        int hsens_index;                              ///< The index to the column that contains sensible enthalpy
        int kabs_index;                               ///< The index to the column that contains K_abs
        int lambda_index;                             ///< The index to the column that contains lambda
        int mixf_index;                               ///< The index to the column that contains mixture fraction
        int numprops;                                 ///< The number of columns that are properties
        int rho_index;                                ///< The index to the column that contains rho
        int species_mass_index;                       ///< The index to the column where the species (by mass fraction) starts
        int species_mole_index;                       ///< The index to the column where the species (by mole fraction) starts
        int temp_index;                               ///< The index to the column that contains temperature
        int visc_index;                               ///< The index to the column that contains viscosity
        };

    //! Structure for holding lower and upper bound indices
    struct indices {
        int d;                                        ///< bound.d - Lower index
        int u;                                        ///< bound.u - Upper index
       };

	////////////////////// DATA MEMBERS /////////////////////

public:
    vector<vector<vector<double> > > eqTables;       ///< All info stored here. Indexed by [Heat Loss][Mixture Fraction][Species/Property Index]->Value
    vector<double>                   hlosses;        ///< A vector containing the known heatloss values
    vector<double>                   hsensVals;      ///< A vector containing the hsens corresponding to the mixf values
    vector<double>                   mixf;           ///< A vector containing the values of the mixf for beginning
    vector<double>                   enth;           ///< A vector containing the values of the enthalpy for beginning.
    vector<string>                   keys;           ///< A vector containing column keys
    odtline                          *odtl;          ///< A backpointer to the odtline
    prop_indices                     index;          ///< index of properties

private:
    bool                             uniform;        ///< True if mixf, hensVals and hloss values are uniform
    int                              numColumns;     ///< Number of Columns
    int                              numRows;        ///< Number of Rows
    int                              numSpecies;     ///< The number of species

	////////////////////// MEMBER FUNCTIONS  /////////////////////

    bool       checkUniformity();
        bool uniformVector(vector<double> vec);
        
        double linearInterpolate(double x1,
                                 double y1,
                                 double x2,
                                 double y2,
                            double x);
        
        
        indices binaryIndicesSearch(vector<double> vec,
                                    double         value);
        
        vector<vector<double> > getXMoleSp();
        vector<double> getAbsorptionCoeffs();
        vector<double> getSpeciesByMoleAtGridPoint(int i);

public:

        double getValAtGridPoint(int i,
                                 int indx);
        double getValAtGridPoint(int    i,
                                 string prop);
        double getValOf(const double mf,
                        const double h,
                        const string key);
        double getValOf(const double mf,
                        const double h,
                        int          indx);
        int getKeyIndex(const string key);

        indices getIndices(double value,
                           vector<double> vec);

        double calcHLossFromIndices(double  mf,
                                    double  h,
                                    indices mfi);
        
        double bilinearInterpolate(int    mfd,
                                   int    mfu,
                                   int    hld,
                                   int    hlu,
                                   double mf_actual,
                                   double hloss_actual,
                                   int    index);
        
        vector<double> getVals(const double mf,
                                    const double h);
        vector<double> getValsGivenHeatLoss(const double mf,
                                                 const double hloss);
        vector<double> getYVals(const double mf,
                                     const double h);

        ////////////////////// CONSTRUCTOR FUNCTIONS  /////////////////////

        table(odtline * newOdtl);
};

#endif

